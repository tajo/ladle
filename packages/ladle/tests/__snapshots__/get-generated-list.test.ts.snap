// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Capital letters in story names converted into delimiters 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const capitalization$$blue$tiny$cat = lazy(() => import(\\"../../../tests/fixtures/capitalization.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"BlueTinyCat\\")
  };
}));
const capitalization$$big$barking$dog = lazy(() => import(\\"../../../tests/fixtures/capitalization.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"BigBarkingDog\\")
  };
}));
export let stories = {
  \\"capitalization--blue-tiny-cat\\": {
    component: capitalization$$blue$tiny$cat
  },
  \\"capitalization--big-barking-dog\\": {
    component: capitalization$$big$barking$dog
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Capital letters in the filename converted into delimiters 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const filename$capitalization$$test = lazy(() => import(\\"../../../tests/fixtures/filenameCapitalization.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Test\\")
  };
}));
export let stories = {
  \\"filename-capitalization--test\\": {
    component: filename$capitalization$$test
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Default title is used instead of the file name 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const title$$cat = lazy(() => import(\\"../../../tests/fixtures/default-title.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
export let stories = {
  \\"title--cat\\": {
    component: title$$cat
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Extract and merge story meta 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const title$$cat = lazy(() => import(\\"../../../tests/fixtures/story-meta.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
const title$$dog = lazy(() => import(\\"../../../tests/fixtures/story-meta.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Dog\\")
  };
}));
export let stories = {
  \\"title--cat\\": {
    component: title$$cat,
    meta: {
      \\"title\\": \\"Title\\",
      \\"meta\\": {
        \\"baseweb\\": {
          \\"theme\\": \\"dark\\",
          \\"browsers\\": [\\"chrome\\", \\"firefox\\"],
          \\"width\\": \\"500px\\"
        },
        \\"links\\": true
      }
    }
  },
  \\"title--dog\\": {
    component: title$$dog,
    meta: {
      \\"title\\": \\"Title\\",
      \\"meta\\": {
        \\"baseweb\\": {
          \\"theme\\": \\"dark\\",
          \\"browsers\\": [\\"chrome\\", \\"webkit\\"]
        }
      }
    }
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Extract default meta 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const title$$cat = lazy(() => import(\\"../../../tests/fixtures/default-meta.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
export let stories = {
  \\"title--cat\\": {
    component: title$$cat,
    meta: {
      \\"title\\": \\"Title\\",
      \\"meta\\": {
        \\"baseweb\\": {
          \\"foo\\": \\"title\\"
        }
      }
    }
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Single file with two stories 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const animals$$cat = lazy(() => import(\\"../../../tests/fixtures/animals.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
const animals$$dog = lazy(() => import(\\"../../../tests/fixtures/animals.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Dog\\")
  };
}));
export let stories = {
  \\"animals--cat\\": {
    component: animals$$cat
  },
  \\"animals--dog\\": {
    component: animals$$dog
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Story name replaces named export as a story name 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const storyname$$doggo = lazy(() => import(\\"../../../tests/fixtures/storyname.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
const storyname$$capital$city = lazy(() => import(\\"../../../tests/fixtures/storyname.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"CapitalCity\\")
  };
}));
const storyname$$champs$élysées = lazy(() => import(\\"../../../tests/fixtures/storyname.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"CapitalReplaced\\")
  };
}));
export let stories = {
  \\"storyname--doggo\\": {
    component: storyname$$doggo
  },
  \\"storyname--capital-city\\": {
    component: storyname$$capital$city
  },
  \\"storyname--champs-\\\\xE9lys\\\\xE9es\\": {
    component: storyname$$champs$élysées
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;

exports[`Turn file name delimiters into spaces and levels correctly 1`] = `
"
import { lazy, createElement, Fragment } from \\"react\\";
import composeDecorators from \\"../src/compose-decorators\\";

const our$animals$$mammals$$cat = lazy(() => import(\\"../../../tests/fixtures/our-animals--mammals.stories.tsx\\").then(module => {
  return {
    default: composeDecorators(module, \\"Cat\\")
  };
}));
export let stories = {
  \\"our-animals--mammals--cat\\": {
    component: our$animals$$mammals$$cat
  }
};
export let config = {};

export const Provider = ({children}) => /*#__PURE__*/createElement(Fragment, null, children);

if (import.meta.hot) {
  import.meta.hot.accept(({ module }) => {
    if (Object.keys(module.stories).every(item => Object.keys(stories).includes(item))) {
      stories = module.stories;
      config = module.config;
    } else {
      // full refresh when new stories are added
      // todo, can dynamic import + React Refresh work?
      import.meta.hot.invalidate();
    }
  });
}
"
`;
